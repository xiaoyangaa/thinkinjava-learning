关于异常：

对于不同类型的错误，要抛出不同的异常类型，因为通常来说，异常类型是异常对象中所包含的仅有的信息，除此之外不包含任何有意义的内容。

RuntimeException代表的是编程错误：

1.无法预料的错误。比如在你的控制范围之外，传进来了一个null引用
2.作为程序员，应该在代码中检查的错误。比如，对于ArrayIndexOutOfBoundException,这种其实是应该自己注意数组不越界的。这样其实是某个地方造成的错误，但是在另一个地方体现了出来。


比如，ArrayList的get（int index） 方法，它一定会先检查这个index是否是在合理的范围内，如果不在的话，抛出一个IndexOutOfBoundsException，这种就是典型的编程错误，需要通知给调用方。

而checkedException，更多的是一种已知的异常，比如socket连接，调用者没有任何编程错误，但是就是可能由于种种原因导致无法连接，这种异常就是很明确的异常，并且需要调用者在编译时就知道这个地方可能会有异常，需要提前做好措施，比如重试等操作。

在effective Java这本书中，关于异常有着如下的建议：


《第58条》： 对可恢复的情况使用受检异常，对编程错误使用运行时异常
在决定使用受检的异常或者是未受检的异常时，主要的原则是：如果期望调用者能够适当的修复，对于这种情况应该使用受检的异常。每个受检的异常都是对API用户的一种潜在暗示：此异常是调用这个方法的一种可能的结果，比如socket建立连接的异常。

而对于运行时异常，是标明编程错误的，大多数的情况下，它所表示的都是前提违例，说白了，就是调用者没有遵守api规范建立的约定，比如数组下标越界的异常。

第59条：避免不必要的使用受检的异常
异常增加了可靠性，但是一旦声明，就必须要在一个或者多个catch块里处理这些异常或者声明它抛出这些异常，无论是哪种方法，都是会给程序带来负担的。
第60条：优先使用标准的异常

IllegalArgumentException:非null的参数值不正确
IllegalStateException:对象状态不合适
NullPointerException:空指针
IndexOutOfBoundsException:下标越界
ConcurrentModificationException:在禁止并发修改的情况下，检测到了并发修改
UnsupportedOperationException:对象不支持用户请求的方法

第61条：抛出与抽象相对应的异常
方法传递底层抽象抛出的异常时，往往会发生这种情况，除了会使人迷惑以外。